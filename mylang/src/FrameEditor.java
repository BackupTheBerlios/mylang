import java.io.*;
import javax.swing.*;
import javax.swing.event.*;

/*
 * FrameEditor.java
 *
 * Created on 10 pa¼dziernik 2003, 20:57
 *
 * Copyright 2003 Michal Dabrowski
 *
 * This file is part of MyLang.
 *
 * MyLang is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * MyLang is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with MyLang; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

/**
 *
 * @author  herrmic
 */
public class FrameEditor extends javax.swing.JFrame
{
	private boolean m_modified;
	private Dictionary m_dict;
	
	/** Creates new form FrameEditor */
	public FrameEditor()
	{
		initComponents();
		m_tableWords.getModel().addTableModelListener(new TableModelListener()
		{
			public void tableChanged(TableModelEvent evt)
			{
				m_modified = true;
			}
		});
		DocumentListener dl = new DocumentListener()
		{
			public void changedUpdate(DocumentEvent evt)
			{
				m_modified = true;
				updateTableHeaders();
			}
			
			public void insertUpdate(DocumentEvent evt)
			{
				m_modified = true;
				updateTableHeaders();
			}
			
			public void removeUpdate(DocumentEvent evt)
			{
				m_modified = true;
				updateTableHeaders();
			}
		};
		m_textLanguage0.getDocument().addDocumentListener(dl);
		m_textLanguage1.getDocument().addDocumentListener(dl);
		m_textDescription.getDocument().addDocumentListener(dl);
		newFile();
		updateTableHeaders();
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	private void initComponents()//GEN-BEGIN:initComponents
	{
		java.awt.GridBagConstraints gridBagConstraints;
		
		m_filechooserDictionary = new javax.swing.JFileChooser();
		jPanel2 = new javax.swing.JPanel();
		jLabel1 = new javax.swing.JLabel();
		m_textLanguage0 = new javax.swing.JTextField();
		jLabel3 = new javax.swing.JLabel();
		m_textLanguage1 = new javax.swing.JTextField();
		m_textDescription = new javax.swing.JTextField();
		jLabel4 = new javax.swing.JLabel();
		jPanel1 = new javax.swing.JPanel();
		jScrollPane1 = new javax.swing.JScrollPane();
		m_tableWords = new javax.swing.JTable();
		m_buttonAdd = new javax.swing.JButton();
		m_buttonRemove = new javax.swing.JButton();
		jMenuBar2 = new javax.swing.JMenuBar();
		jMenu2 = new javax.swing.JMenu();
		m_menuFileNew = new javax.swing.JMenuItem();
		m_menuFileOpen = new javax.swing.JMenuItem();
		m_menuFileSave = new javax.swing.JMenuItem();
		m_menuFileSaveas = new javax.swing.JMenuItem();
		jSeparator1 = new javax.swing.JSeparator();
		m_menuFileClose = new javax.swing.JMenuItem();
		jMenu1 = new javax.swing.JMenu();
		m_menuEditAdd = new javax.swing.JMenuItem();
		m_menuEditRemove = new javax.swing.JMenuItem();
		
		
		setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
		setTitle("MyLang - Editor");
		addWindowListener(new java.awt.event.WindowAdapter()
		{
			public void windowClosing(java.awt.event.WindowEvent evt)
			{
				formWindowClosing(evt);
			}
		});
		
		jPanel2.setLayout(new java.awt.GridBagLayout());
		
		jLabel1.setText("Languages");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
		jPanel2.add(jLabel1, gridBagConstraints);
		
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
		jPanel2.add(m_textLanguage0, gridBagConstraints);
		
		jLabel3.setText("Description");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
		jPanel2.add(jLabel3, gridBagConstraints);
		
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
		jPanel2.add(m_textLanguage1, gridBagConstraints);
		
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.gridwidth = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
		jPanel2.add(m_textDescription, gridBagConstraints);
		
		jLabel4.setText("Words");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
		gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
		jPanel2.add(jLabel4, gridBagConstraints);
		
		jPanel1.setLayout(new java.awt.GridBagLayout());
		
		m_tableWords.setModel(new WordsEditorTableModel());
		jScrollPane1.setViewportView(m_tableWords);
		
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridheight = 3;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
		jPanel1.add(jScrollPane1, gridBagConstraints);
		
		m_buttonAdd.setText("Add");
		m_buttonAdd.addActionListener(new java.awt.event.ActionListener()
		{
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				m_buttonAddActionPerformed(evt);
			}
		});
		
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
		jPanel1.add(m_buttonAdd, gridBagConstraints);
		
		m_buttonRemove.setText("Remove");
		m_buttonRemove.addActionListener(new java.awt.event.ActionListener()
		{
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				m_buttonRemoveActionPerformed(evt);
			}
		});
		
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
		jPanel1.add(m_buttonRemove, gridBagConstraints);
		
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.gridwidth = 2;
		gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		jPanel2.add(jPanel1, gridBagConstraints);
		
		getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);
		
		jMenu2.setText("File");
		m_menuFileNew.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
		m_menuFileNew.setText("New");
		m_menuFileNew.addActionListener(new java.awt.event.ActionListener()
		{
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				m_menuFileNewActionPerformed(evt);
			}
		});
		
		jMenu2.add(m_menuFileNew);
		
		m_menuFileOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
		m_menuFileOpen.setText("Open...");
		m_menuFileOpen.addActionListener(new java.awt.event.ActionListener()
		{
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				m_menuFileOpenActionPerformed(evt);
			}
		});
		
		jMenu2.add(m_menuFileOpen);
		
		m_menuFileSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
		m_menuFileSave.setText("Save");
		m_menuFileSave.addActionListener(new java.awt.event.ActionListener()
		{
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				m_menuFileSaveActionPerformed(evt);
			}
		});
		
		jMenu2.add(m_menuFileSave);
		
		m_menuFileSaveas.setText("Save as...");
		m_menuFileSaveas.addActionListener(new java.awt.event.ActionListener()
		{
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				m_menuFileSaveasActionPerformed(evt);
			}
		});
		
		jMenu2.add(m_menuFileSaveas);
		
		jMenu2.add(jSeparator1);
		
		m_menuFileClose.setText("Close");
		m_menuFileClose.addActionListener(new java.awt.event.ActionListener()
		{
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				m_menuFileCloseActionPerformed(evt);
			}
		});
		
		jMenu2.add(m_menuFileClose);
		
		jMenuBar2.add(jMenu2);
		
		jMenu1.setText("Edit");
		m_menuEditAdd.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_INSERT, 0));
		m_menuEditAdd.setText("Add");
		m_menuEditAdd.addActionListener(new java.awt.event.ActionListener()
		{
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				m_menuEditAddActionPerformed(evt);
			}
		});
		
		jMenu1.add(m_menuEditAdd);
		
		m_menuEditRemove.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, java.awt.event.InputEvent.ALT_MASK));
		m_menuEditRemove.setText("Remove");
		m_menuEditRemove.addActionListener(new java.awt.event.ActionListener()
		{
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				m_menuEditRemoveActionPerformed(evt);
			}
		});
		
		jMenu1.add(m_menuEditRemove);
		
		jMenuBar2.add(jMenu1);
		
		setJMenuBar(jMenuBar2);
		
		pack();
	}//GEN-END:initComponents
				
	private void formWindowClosing(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowClosing
	{//GEN-HEADEREND:event_formWindowClosing
		if(canFileBeClosed())
			dispose();
	}//GEN-LAST:event_formWindowClosing
	
	private void m_menuFileCloseActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_m_menuFileCloseActionPerformed
	{//GEN-HEADEREND:event_m_menuFileCloseActionPerformed
		if(canFileBeClosed())
			dispose();
	}//GEN-LAST:event_m_menuFileCloseActionPerformed
	
	private void m_menuFileSaveActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_m_menuFileSaveActionPerformed
	{//GEN-HEADEREND:event_m_menuFileSaveActionPerformed
		m_filechooserDictionary.setCurrentDirectory(
		new File(MyLang.getPrefDictionariesPath()));
		if(m_dict.getFile() != null)
			saveFile(m_dict.getFile());
		else if(m_filechooserDictionary.showSaveDialog(this) == JFileChooser.APPROVE_OPTION)
		{
			MyLang.setPrefDictionariesPath(m_filechooserDictionary
			.getSelectedFile().getAbsolutePath());
			saveFile(m_filechooserDictionary.getSelectedFile());
		}
	}//GEN-LAST:event_m_menuFileSaveActionPerformed
	
	private void m_menuFileNewActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_m_menuFileNewActionPerformed
	{//GEN-HEADEREND:event_m_menuFileNewActionPerformed
		if(canFileBeClosed())
			newFile();
	}//GEN-LAST:event_m_menuFileNewActionPerformed
	
	private void m_menuEditRemoveActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_m_menuEditRemoveActionPerformed
	{//GEN-HEADEREND:event_m_menuEditRemoveActionPerformed
		((WordsEditorTableModel)m_tableWords.getModel()).removeWords(m_tableWords.getSelectedRows());
	}//GEN-LAST:event_m_menuEditRemoveActionPerformed
	
	private void m_buttonRemoveActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_m_buttonRemoveActionPerformed
	{//GEN-HEADEREND:event_m_buttonRemoveActionPerformed
		((WordsEditorTableModel)m_tableWords.getModel()).removeWords(m_tableWords.getSelectedRows());
	}//GEN-LAST:event_m_buttonRemoveActionPerformed
	
	private void m_menuEditAddActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_m_menuEditAddActionPerformed
	{//GEN-HEADEREND:event_m_menuEditAddActionPerformed
		((WordsEditorTableModel)m_tableWords.getModel()).addWord();
	}//GEN-LAST:event_m_menuEditAddActionPerformed
	
	private void m_buttonAddActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_m_buttonAddActionPerformed
	{//GEN-HEADEREND:event_m_buttonAddActionPerformed
		((WordsEditorTableModel)m_tableWords.getModel()).addWord();
	}//GEN-LAST:event_m_buttonAddActionPerformed
	
	private void m_menuFileSaveasActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_m_menuFileSaveasActionPerformed
	{//GEN-HEADEREND:event_m_menuFileSaveasActionPerformed
		m_filechooserDictionary.setCurrentDirectory(
		new File(MyLang.getPrefDictionariesPath()));
		if(m_filechooserDictionary.showSaveDialog(this) == JFileChooser.APPROVE_OPTION)
		{
			MyLang.setPrefDictionariesPath(m_filechooserDictionary
			.getSelectedFile().getAbsolutePath());
			saveFile(m_filechooserDictionary.getSelectedFile());
		}
	}//GEN-LAST:event_m_menuFileSaveasActionPerformed
	
	private void m_menuFileOpenActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_m_menuFileOpenActionPerformed
	{//GEN-HEADEREND:event_m_menuFileOpenActionPerformed
		if(canFileBeClosed())
		{
			m_filechooserDictionary.setCurrentDirectory(
			new File(MyLang.getPrefDictionariesPath()));
			if(m_filechooserDictionary.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
			{
				MyLang.setPrefDictionariesPath(m_filechooserDictionary
				.getSelectedFile().getAbsolutePath());
				loadFile(m_filechooserDictionary.getSelectedFile());
			}
		}
	}//GEN-LAST:event_m_menuFileOpenActionPerformed
	
	/** Exit the Application */
	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JLabel jLabel4;
	private javax.swing.JMenu jMenu1;
	private javax.swing.JMenu jMenu2;
	private javax.swing.JMenuBar jMenuBar2;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JPanel jPanel2;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JSeparator jSeparator1;
	private javax.swing.JButton m_buttonAdd;
	private javax.swing.JButton m_buttonRemove;
	private javax.swing.JFileChooser m_filechooserDictionary;
	private javax.swing.JMenuItem m_menuEditAdd;
	private javax.swing.JMenuItem m_menuEditRemove;
	private javax.swing.JMenuItem m_menuFileClose;
	private javax.swing.JMenuItem m_menuFileNew;
	private javax.swing.JMenuItem m_menuFileOpen;
	private javax.swing.JMenuItem m_menuFileSave;
	private javax.swing.JMenuItem m_menuFileSaveas;
	private javax.swing.JTable m_tableWords;
	private javax.swing.JTextField m_textDescription;
	private javax.swing.JTextField m_textLanguage0;
	private javax.swing.JTextField m_textLanguage1;
	// End of variables declaration//GEN-END:variables
	
	private void loadFile(File f)
	{
		try
		{
			m_dict = new Dictionary(f);
			m_textLanguage0.setText(m_dict.getLanguageNames()[0]);
			m_textLanguage1.setText(m_dict.getLanguageNames()[1]);
			m_textDescription.setText(m_dict.getDescription());
			((WordsEditorTableModel)m_tableWords.getModel()).setDictionary(m_dict);
			setTitle("MyLang - " + f.getName() + " - Editor");
			m_modified = false;
		}
		catch(IOException ex)
		{
			JOptionPane.showMessageDialog(this, ex.getMessage(),
			"Error", JOptionPane.ERROR_MESSAGE);
		}
	}
	
	private void saveFile(File f)
	{
		try
		{
			m_dict.getLanguageNames()[0] = m_textLanguage0.getText();
			m_dict.getLanguageNames()[1] = m_textLanguage1.getText();
			m_dict.setDescription(m_textDescription.getText());
			m_dict.write(f);
			setTitle("MyLang - " + f.getName() + " - Editor");
			m_modified = false;
		}
		catch(IOException ex)
		{
			JOptionPane.showMessageDialog(this, ex.getMessage(),
			"Error", JOptionPane.ERROR_MESSAGE);
		}
	}
	
	private void newFile()
	{
		m_dict = new Dictionary();
		m_textLanguage0.setText("");
		m_textLanguage1.setText("");
		m_textDescription.setText("");
		((WordsEditorTableModel)m_tableWords.getModel()).setDictionary(m_dict);
		setTitle("MyLang - Editor");
		m_modified = false;
	}
	
	private boolean canFileBeClosed()
	{
		if(m_modified)
		{
			if(JOptionPane.showConfirmDialog(this,
			"File has been modified - all changes will be lost. Do you want to continue?",
			"Warning", JOptionPane.YES_NO_OPTION,
			JOptionPane.WARNING_MESSAGE) == JOptionPane.NO_OPTION)
			{
				return false;
			}
		}
		return true;
	}
	
	private void updateTableHeaders()
	{
		String s;
		
		s = m_textLanguage0.getText();
		if(s.compareTo("") == 0)
			s = "Language 1";
		m_tableWords.getColumnModel().getColumn(
		m_tableWords.convertColumnIndexToView(0)).setHeaderValue(s);
		
		s = m_textLanguage1.getText();
		if(s.compareTo("") == 0)
			s = "Language 2";
		m_tableWords.getColumnModel().getColumn(
		m_tableWords.convertColumnIndexToView(1)).setHeaderValue(s);
		
		m_tableWords.getTableHeader().resizeAndRepaint();
	}
}

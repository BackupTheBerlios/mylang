package mylang.gui;

import mylang.data.*;
import mylang.gui.models.*;
import java.io.*;
import javax.swing.*;

/*
 * FrameDictionaryInfo.java
 *
 * Created on 22 listopad 2003, 13:24
 *
 * Copyright 2003 Michal Dabrowski
 *
 * This file is part of MyLang.
 *
 * MyLang is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * MyLang is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with MyLang; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

/**
 *
 * @author  herrmic
 */
public class FrameDictionaryInfo extends javax.swing.JFrame
{
	private Dictionary m_dict;
	
	/** Creates new form FrameDictionaryInfo */
	public FrameDictionaryInfo(Dictionary dict)
	{
		m_dict = dict;
		initComponents();
		m_textLanguage0.setText(m_dict.getLanguageNames()[0]);
		m_textLanguage1.setText(m_dict.getLanguageNames()[1]);
		m_textDescription.setText(m_dict.getDescription());
		updateStats();
		
		((JComponent)m_spinnerLeaveStats.getEditor().getComponent(0)).setToolTipText(
			m_spinnerLeaveStats.getToolTipText());
		setLocationRelativeTo(null);
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	private void initComponents()//GEN-BEGIN:initComponents
	{
		java.awt.GridBagConstraints gridBagConstraints;
		
		jLabel1 = new javax.swing.JLabel();
		m_textLanguage0 = new javax.swing.JTextField();
		m_textLanguage1 = new javax.swing.JTextField();
		jLabel2 = new javax.swing.JLabel();
		m_textDescription = new javax.swing.JTextField();
		jScrollPane1 = new javax.swing.JScrollPane();
		m_tableStats = new javax.swing.JTable();
		jSeparator1 = new javax.swing.JSeparator();
		jPanel1 = new javax.swing.JPanel();
		jLabel3 = new javax.swing.JLabel();
		m_spinnerLeaveStats = new javax.swing.JSpinner();
		jLabel4 = new javax.swing.JLabel();
		m_buttonClearStats = new javax.swing.JButton();
		m_buttonClose = new javax.swing.JButton();
		
		getContentPane().setLayout(new java.awt.GridBagLayout());
		
		setTitle("MyLang - Dictionary Info");
		setIconImage(java.awt.Toolkit.getDefaultToolkit().getImage(this.getClass().getResource("resources/logo16x16.png")));
		addWindowListener(new java.awt.event.WindowAdapter()
		{
			public void windowClosing(java.awt.event.WindowEvent evt)
			{
				exitForm(evt);
			}
		});
		
		jLabel1.setText("Languages");
		jLabel1.setFocusable(false);
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
		getContentPane().add(jLabel1, gridBagConstraints);
		
		m_textLanguage0.setEditable(false);
		m_textLanguage0.setToolTipText("<HTML>Name of the first language.</HTML>");
		m_textLanguage0.setFocusable(false);
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
		getContentPane().add(m_textLanguage0, gridBagConstraints);
		
		m_textLanguage1.setEditable(false);
		m_textLanguage1.setToolTipText("<HTML>Name of the second language.</HTML>");
		m_textLanguage1.setFocusable(false);
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
		getContentPane().add(m_textLanguage1, gridBagConstraints);
		
		jLabel2.setText("Description");
		jLabel2.setFocusable(false);
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
		getContentPane().add(jLabel2, gridBagConstraints);
		
		m_textDescription.setEditable(false);
		m_textDescription.setToolTipText("<HTML>Short description of the dictionary.</HTML>");
		m_textDescription.setFocusable(false);
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.gridwidth = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
		getContentPane().add(m_textDescription, gridBagConstraints);
		
		jScrollPane1.setToolTipText("<HTML>Table displaying all available stats for the dictionary.<BR>\nEach row in the table represents a single session:<BR>\n<B>Date</B> - date of the session,<BR>\n<B>Mode</B> - mode,<BR>\n<B>Score</B> - number of mistakes,<BR>\n<B>Duration</B> - duration.\n</HTML>");
		m_tableStats.setModel(new StatsListTableModel(m_dict.getStats()));
		m_tableStats.setRowSelectionAllowed(false);
		jScrollPane1.setViewportView(m_tableStats);
		
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.gridwidth = 3;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
		getContentPane().add(jScrollPane1, gridBagConstraints);
		
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 3;
		gridBagConstraints.gridwidth = 3;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
		getContentPane().add(jSeparator1, gridBagConstraints);
		
		jPanel1.setLayout(new java.awt.GridBagLayout());
		
		jLabel3.setDisplayedMnemonic('V');
		jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
		jLabel3.setLabelFor(m_spinnerLeaveStats);
		jLabel3.setText("Leave last");
		jLabel3.setFocusable(false);
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 2);
		jPanel1.add(jLabel3, gridBagConstraints);
		
		m_spinnerLeaveStats.setToolTipText("<HTML>Allows to select how many stats you want to keep.<BR>\n<I>The remaining stats will be deleted only if you use the <B>\"Clear stats\"</B> button.</I>\n</HTML>");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.weightx = 0.2;
		gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
		jPanel1.add(m_spinnerLeaveStats, gridBagConstraints);
		
		jLabel4.setText("stats");
		jLabel4.setFocusable(false);
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
		jPanel1.add(jLabel4, gridBagConstraints);
		
		m_buttonClearStats.setMnemonic('R');
		m_buttonClearStats.setText("Clear stats");
		m_buttonClearStats.setToolTipText("<HTML>Deletes all stats except the selected number of the last ones.<BR>\nAdjust the number of stats to keep with the <B>\"Lave last <I>n</I> stats\"</B> control.\n</HTML>");
		m_buttonClearStats.addActionListener(new java.awt.event.ActionListener()
		{
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				m_buttonClearStatsActionPerformed(evt);
			}
		});
		
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
		jPanel1.add(m_buttonClearStats, gridBagConstraints);
		
		m_buttonClose.setMnemonic('C');
		m_buttonClose.setText("Close");
		m_buttonClose.setToolTipText("<HTML>Closes this window.</HTML>");
		m_buttonClose.addActionListener(new java.awt.event.ActionListener()
		{
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				m_buttonCloseActionPerformed(evt);
			}
		});
		
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
		jPanel1.add(m_buttonClose, gridBagConstraints);
		
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 4;
		gridBagConstraints.gridwidth = 3;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
		getContentPane().add(jPanel1, gridBagConstraints);
		
		pack();
	}//GEN-END:initComponents
	
	private void m_buttonClearStatsActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_m_buttonClearStatsActionPerformed
	{//GEN-HEADEREND:event_m_buttonClearStatsActionPerformed
		try
		{
			int i = ((Integer)
			((SpinnerNumberModel)m_spinnerLeaveStats.getModel()).getValue()
			).intValue();
			if((i >= 0) && (i < m_dict.getStats().size()))
			{
				m_dict.getStats()
				.subList(0, m_dict.getStats().size() - i).clear();
				m_dict.write(m_dict.getFile());
				updateStats();
			}
		}
		catch(IOException ex)
		{
			JOptionPane.showMessageDialog(this,
			"Cannot update stats for file \"" + m_dict.getFile() + "\"\n"
			+ ex.getMessage(),
			"Error", JOptionPane.ERROR_MESSAGE);
		}
	}//GEN-LAST:event_m_buttonClearStatsActionPerformed
	
	private void m_buttonCloseActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_m_buttonCloseActionPerformed
	{//GEN-HEADEREND:event_m_buttonCloseActionPerformed
		setVisible(false);
		dispose();
	}//GEN-LAST:event_m_buttonCloseActionPerformed
	
	/** Exit the Application */
	private void exitForm(java.awt.event.WindowEvent evt)//GEN-FIRST:event_exitForm
	{
		setVisible(false);
		dispose();
	}//GEN-LAST:event_exitForm
	
	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JLabel jLabel4;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JSeparator jSeparator1;
	private javax.swing.JButton m_buttonClearStats;
	private javax.swing.JButton m_buttonClose;
	private javax.swing.JSpinner m_spinnerLeaveStats;
	private javax.swing.JTable m_tableStats;
	private javax.swing.JTextField m_textDescription;
	private javax.swing.JTextField m_textLanguage0;
	private javax.swing.JTextField m_textLanguage1;
	// End of variables declaration//GEN-END:variables
	
	public void updateStats()
	{
		((StatsListTableModel)m_tableStats.getModel())
		.setStatsList(m_dict.getStats());
		if(m_dict.getStats().size() == 0)
		{
			m_spinnerLeaveStats.setEnabled(false);
			m_buttonClearStats.setEnabled(false);
		}
		else
		{
			m_spinnerLeaveStats.setModel(
			new SpinnerNumberModel(0, 0, m_dict.getStats().size() - 1, 1));
			SpinnerNumberModel snm = (SpinnerNumberModel)m_spinnerLeaveStats.getModel();
			snm.setValue(snm.getMaximum());
		}
	}
}
